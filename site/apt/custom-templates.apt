                                    ------
                                    Criando ou Customizando Templates
                                    
Criando ou Customizando Templates

%{toc|section=1|fromDepth=1|toDepth=3}

  Para o <<Demoiselle Nimble>> um template nada mais é do que uma estrutura de diretórios e arquivos de fácil
  entendimento e customização. A nomenclatura de diretórios/arquivos e os próprios arquivos presentes nesta
  estrutura podem conter regras de transformação de código. 
  
  Para facilitar o entendimento vamos ver uma estrutura de <<Template Nimble>>. Quando falarmos apenas de
  <<template>> você saberá que se trata de um arquivo que contém regras de geração de código, utilizando uma
  das engines suportadas.
  
* {Engines suportadas}

  O <<Demoiselle Nimble>> suporta 3 engines bastantes populares normalmente utilizadas para geração de código.
  Nomeie seu arquivo utilizando uma da extensões suportadas para que o <<Demoiselle Nimble>> saiba qual engine
  aplicar. O arquivo resultante terá o mesmo nome do original, removida a extensão. 
  
  * <<Velocity>>: utilize as extensões ".vm" ou ".vsl" ou ".velocity"
  
  * <<FreeMarker>>: utilize as extensões ".fm" ou ".ftl" ou ".freemarker"
  
  * <<Groovy>>: utilize as extensões ".gvy", ".gt" ou ".groovy"  
  
  []
  
  Num <<Template Nimble>> você poderá combinar sem problemas templates dessas três engines, utilizando a sintaxe
  que for mais adequada à tarefa que cada template terá de realizar.
  
* {Template Nimble}  

  Tomamos como exemplo o template <<generate-crud-vaadin>>, um gerador de CRUD para a versão 2 do <<Framework Demoiselle>>
  que utiliza a nova extensão <<demoiselle-vaadin>>.
  
  Ao encontrar uma estrutura de arquivo dessa o <<Demoiselle Nimble>> irá processar sequencialmente e recursivamente
  todos os diretórios e arquivos, gerando uma estrutura idêntica no diretório de saída escolhido. As seguintes regras
  são seguidas:
  
    [[1]] Os arquivos de template (cujos nomes terminam com uma das extensões suportadas) serão processados primeiros e 
    copiados para a pasta de destino sem a respetiva extensão.
      
    [[1]] Os arquivos de configuração (extensão <<<.conf>>>) não serão copiados, pois apenas fornecem informações adicionais
    sobre o template de mesmo nome (retirada o '.conf').
      
    [[1]] Os arquivos de fragmento (que contem a String '.fragment' em seu nome) serão processados por último e não geram
    novos arquivos, apenas adicionam trechos de código em arquivos já existentes.
      
    [[1]] Os nomes de arquivos ou diretórios que possuem <<<$\{nomeDaVariavel\}>>> terão este trecho substituído pelo valor
    da variável correspondente.
    
    []

  No momento não vamos entrar em detalhes dos fragmentos nem das regras de substituição de nomes de diretórios e arquivos.
  Retomaremos mais adiante nesse ponto. Eis a estrutura de arquivos e diretórios do referido template:
  
+---------------------------------------------------------------------------------------------+ 
generate-crud-vaadin/
|-- src
|   `-- main
|       |-- java
|       |   `-- ${packageName}
|       |       |-- business
|       |       |   `-- ${pojo}BC.java.vm
|       |       |-- domain
|       |       |   |-- ${pojo}.java.vm
|       |       |   `-- ${pojo}.java.vm.conf
|       |       |-- persistence
|       |       |   `-- ${pojo}DAO.java.vm
|       |       `-- ui
|       |           |-- presenter
|       |           |   |-- ${pojo}Presenter.java.vm
|       |           |   |-- MainPresenter.java.fragment-constant.vm
|       |           |   |-- MainPresenter.java.fragment-constant.vm.conf
|       |           |   |-- MainPresenter.java.fragment-inject.vm
|       |           |   |-- MainPresenter.java.fragment-inject.vm.conf
|       |           |   |-- MainPresenter.java.fragment-menuSelect.vm
|       |           |   `-- MainPresenter.java.fragment-menuSelect.vm.conf
|       |           `-- view
|       |               |-- ${pojo}View.java.vm
|       |               |-- MainView.java.fragment.vm
|       |               `-- MainView.java.fragment.vm.conf
|       `-- resources
|           |-- META-INF
|           |   |-- persistence.xml.fragment.vm
|           |   `-- persistence.xml.fragment.vm.conf
|           |-- messages.properties.fragment.groovy
|           |-- messages.properties.fragment.groovy.conf
|           |-- messages_en.properties.fragment.groovy
|           `-- messages_en.properties.fragment.groovy.conf
`-- template.conf
+---------------------------------------------------------------------------------------------+ 

* {Arquivo template.conf}

  O primeiro arquivo que destacamos aqui é o <<<template.conf>>>, localizado no diretório raiz do template.
  Vamos analisar seu conteúdo:

+---------------------------------------------------------------------------------------------+ 
name = "Demoiselle v2 Generate Vaadin CRUD"
description = "Generates a complete Demoiselle 2.x Vaadin CRUD for a given entity"
version = "1.0"
vars {
    packageName {
        label = "Package Name"
        defaultValue = "br.gov.frameworkdemoiselle.sample"
    }
    pojo {
        label = "Entity Name"
    }
}
customVars {
	bean = "pojo.toLowerCase()"
	pojoFileName = "templateDestPath + 'src/main/java/' + packageName.replace('.', '/') 
	               + '/domain/' + pojo + '.java'"
}
+---------------------------------------------------------------------------------------------+

  Todo arquivo <<<template.conf>>> deve possuir os atributos <<name>>, <<description>> e <<version>>, informando
  respectivamente nome, descrição e a versão do template.
  
  Na seção <<vars>> são informadas todas as variáveis que são esperadas nos templates geradores de código.
  Neste exemplo são apenas duas: <packageName> e <pojo>. Para determinar o comportamento visual do Demoiselle Nimble
  (tanto na linha de comando quando na interface gráfica), cada variável pode ter os atributos:
  
      * <<label>> - especifica como o parâmetro será solicitado ao usuário. Se não fornecido será o próprio nome da variável.
      
      * <<defaultValue>> - apresenta ao usuário um valor padrão
      
      * <<required>> - se <<<false>>> indica que o preenchimento é opcional. Default é <<<true>>>.
      
      []
  
  A seção <<customVars>> é utilizada para criar novas variáveis dependentes dos valores informados pelo usuário.
  Neste exemplo, a variável <bean> conterá o valor informado em <pojo>, convertido para letras minúsculas. O Demoiselle Nimble
  aceitará qualquer expressão válida na linguagem <<Groovy>>.
  
  Você deve ter observado que <pojoFileName> faz uso de variáveis não especificadas em <<vars>>. Saiba porque logo abaixo.
  
* {Template vars}

  São variáveis que começam sempre com a palavra "template" e estão disponíveis para qualquer template específico. São elas:
   
    * <templateSourcePath> - o diretório de origem do template sendo executado
    
    * <templateDestPath> - o diretório de saída para o processamento do template escolhido
    
    * <templateName> - o nome do arquivo template sendo executado
    
    * <templateDestPath> - o diretório completo onde será gerado o arquivo de saída
    
    * <templateDestFileName> - o nome do arquivo que será gerado
    
    * <templateVars> - um mapa contendo todas as variáveis disponíveis para utilizadação dos templates (as <<template vars>>,
    as variáveis da seção <<vars>> e as <<customVars>>)
    
    []

  Agora a variável <pojoFileName> previamente citada fica mais clara. É a concatenação do diretório de saída com a estrutura
  de pacotes Java onde se espera encontrar uma classe de domínio. Mais à frente veremos como isso será útil.
  
* {Templates}

  Um arquivo de template é um arquivo texto como outro qualquer, porém com nome terminado em uma das extensões suportadas.
  
  Seu conteúdo é puramente texto. Dentro dele pode ser utilizada a sintaxe prevista pela engine escolhida (ex: VTL do Velocity).
  Foge do escopo desta documentação entrar em detalhes de cada sintaxe, pois isto pode ser aprendido consultando os sites dos
  respectivos projetos.
  
  A maioria dos templates, porém, normalmente se comporta como no exemplo abaixo. Neste caso, tanto Velocity, quanto FreeMarker
  e Groovy utilizam a sequência <<<$\{nomeDaVariavel\}>>> para efetuar a substituição pelo conteúdo da varíavel informado pelo
  usuário (ou pode ser também uma variável customizada).
   
  Casos mais complexos podem envolver estruturas de decisões, loops e até o uso funções ou bibliotecas externas.
  
  Veja abaixo um exemplo de conteúdo de arquivo de template a ser processado pelo Demoiselle Nimble: 
  
+---------------------------------------------------------------------------------------------+
package ${packageName}.business;

import br.gov.frameworkdemoiselle.stereotype.BusinessController;
import br.gov.frameworkdemoiselle.template.DelegateCrud;

import ${packageName}.domain.${pojo};
import ${packageName}.persistence.${pojo}DAO;

@BusinessController
public class ${pojo}BC extends DelegateCrud<${pojo}, Long, ${pojo}DAO> {
	private static final long serialVersionUID = 1L;
}
+---------------------------------------------------------------------------------------------+

* {Arquivos de configuração}

  Cada template pode possuir um arquivo de configuração associado, especificando outro de mesmo 
  nome com a extensão <<<.conf>>>.
  
    * <<skipIfExists>> - Se <<<true>>>, informa que o template não deve ser processado caso já exista o arquivo de saída. Default é <<<false>>>;
    
    * <<condition>> - Especifica uma condição (uma expressão Groovy entre "aspas") para que o template seja processado. Default é processar sempre.
    
    []
    
* {Nomenclatura de arquivos e diretórios}

  As ferramentas geradoras de código que temos visto normalmente tem algo em comum. A necessidade
  de um arquivo <<<.txt>>> ou <<<.xml>>> que faça o "de -> para", especificando as regras de transformação de 
  arquivos template presentes na origem em diretórios e arquivos da pasta de destino.
  
  Observamos que manter tais arquivos é trabalhoso e repetitivo, pois é comum que eles reflitam
  a própria estrutura de diretórios da origem. Por esta razão o <<Demoiselle Nimble>> eliminou
  essa necessidade, fazendo com que a própria estrutura de diretórios diga o que tem de ser feito.
  
  É por isso que a nomenclatura de arquivos e pasta também podem utilizar a sintaxe de templates.
  No exemplo mais acima observamos a pasta <<</src/main/java/$\{packageName\}>>>. Encontrando o valor 
  sendo <<<com.mycompany.mypackage>>> em <packageName>, o Nimble automaticamente substituirá os '.' por '/'
  e gerará o diretório de saída desejado. Da mesma forma, o nome de template <<<$\{pojo}BC.java.vm>>>
  irá gerar <<<AlunoBC.java>>> se o valor de <pojo> for <<<Aluno>>>. 
  
  Então, <<</src/main/java/$\{packageName\}/business/$\{pojo}BC.java.vm>>> será transformado em 
  <<</src/main/java/com/mycompany/mypackage/business/AlunoBC.java>>>. Simples, não é?
  
* {Fragmentos}

  Num processo de geração de código nem sempre desejamos gerar novos arquivos, mas às vezes apenas acrescentar
  trechos em arquivos existentes. Arquivos de configuração, são um exemplo: ao gerar uma nova classe para uma entidade
  de domínio é necessário inclui-la no arquivo <<<persistence.xml>>> para que a JPA possa reconhecê-lo. Os fragmentos
  vem para resolver esse problema.
  
    * <<insertPoint>> - Indica o ponto de inserção do fragmento, ou seja, o texto que será procurado no arquivo de saída.
      Opcional caso insertPoint seja "top" ou "bottom".
    
    * <<insertPosition>> - A posição onde o fragmento será inserido. Pode ser "top" ou "bottom", para inserir
      o fragmento no início ou no final do arquivo; "before" ou "after", indicando se será antes ou
      depois do ponto de inserção. Default é "after".
      
      []
  
  Às vezes é necessário incluir fragmentos em pontos diferentes do mesmo arquivo de destino. Para isso basta configurar
  um template para cada fragmento e colocar as definições no respectivo arquivo <<<.conf>>>.
  
  O exemplo a seguir ilustra o uso:
  
  <<<generate-crud-vaadin/src/main/resources/META-INF/persistence.xml.fragment.vm>>>:
  
+---------------------------------------------------------------------------------------------+
	<class>${packageName}.domain.${pojo}</class>
	
+---------------------------------------------------------------------------------------------+

  <<<generate-crud-vaadin/src/main/resources/META-INF/persistence.xml.fragment.vm.conf>>>:
  
+---------------------------------------------------------------------------------------------+
insertPoint = "<properties>"
insertPosition = "before"
+---------------------------------------------------------------------------------------------+

* {Conclusões}

  Esta é uma documentação inicial de referência que busca englobar os principais aspectos
  envolvidos na criação e customização de templates. Sugerimos estudar os templates que já vem
  fornecidos com o <<Demoiselle Nimble>> para uma melhor compreensão. Eles podem - e devem -
  ser utilizados como base para a criação de novos templates que sejam úteis para um projeto,
  unidade ou organização específica.
  
  Se você tem ideias de melhoria para o <<Demoiselle Nimble>> ou encontrou problemas, não deixe
  de registrar no tracker do <<Demoiselle Framework>> em {{http://tracker.frameworkdemoiselle.gov.br}}.