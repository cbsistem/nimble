<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="eclipsesample"  >
	<abstract><para>Exemplo prático usando o ambiente de Desenvolvimento <foreignphrase>Eclipse IDE</foreignphrase> para geração de aplicação JSF com Primefaces</para></abstract>
	<title>Exemplo JSF/PrimeFaces usando Eclipse IDE</title>	
	<para>O Demoiselle Nimble possui um plugin para Eclipse que já conta com uma boa integração. Então neste capítulo faremos uma desmonstração com o uso desta ferramenta. 
	</para>
	 <para>Vamos considerar que a instalação e configuração já esteja de  acordo com as intruções contidas na 
	 <xref linkend="eclipse_install"/>
	</para>
	<section id="ESample">
	<title>Prepararação do Ambiente</title>
		<para> Antes de iniciar o uso do Demoiselle-Nimble, podemos criar um projeto usando um arquétipo do Demoiselle. Esse procedimento também pode ser feito diretamente no Eclipse ou 
		ou Maven sem o uso do Nimble, mas a opção do Demoiselle-Nimble serve para facilitar.</para>
		<para> Abaixo video de exemplo de criação de projeto com Plugin Maven do Eclipse.</para>
	<para>
		<!-- <mediaobject >
			<videoobject >
				<videodata valign="middle" align="center" scalefit="100%" fileref="videos/nimble_sample_create_proj_eclipse_leg.avi" scale="100%" width="100%" contentwidth="100%"/>
			</videoobject>		
			<textobject>
				<para>Demonstração de criação de projeto através do Plugin Maven/Eclipse</para>
			</textobject>
		</mediaobject>  -->		
		<ulink url="http://youtu.be/2jxzHqI1RCk"></ulink>		
	</para>		
		
		<section id="ESample_Create_Proj">
		<title>Criação do projeto base</title>
		<para> Caso opte por criar o projeto Maven através do próprio Eclipse vá direto para : <xref linkend="ESample_Prepar_Proj"/> </para>
		<para> Com o Eclise aberto, veja onde estão os acionadores do Plugin Demoiselle Nimble:</para>		
		<para>
			<itemizedlist>
				<listitem>
					<para> Um ícone na barra de ferramentas:</para>
					<para>
        				<mediaobject>
		       				<imageobject role="fo">
		               			<imagedata fileref="images/IconeNimble.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        			</imageobject>
		        			<imageobject role="html">
		  	            			<imagedata fileref="images/IconeNimble.png"  format="PNG" align="center"/>
		        			</imageobject>
	       	    			<textobject>
								<phrase>Icone do Demoiselle Nimble na barra de ferramentas</phrase>
							</textobject>
							<caption>
								<para>Icone do Demoiselle Nimble na barra de ferramentas</para>
							</caption>		        	    
        				</mediaobject>            		
		 			</para>
				</listitem>
				<listitem>
					<para>Sub-item no Menu Ferramentas</para>
					<para>
        				<mediaobject>
		       				<imageobject role="fo">
		               			<imagedata fileref="images/MenuNimbleEclipse.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        			</imageobject>
		        			<imageobject role="html">
		  	            			<imagedata fileref="images/MenuNimbleEclipse.png"  format="PNG" align="center"/>
		        			</imageobject>
	       	    			<textobject>
								<phrase>Sub-item Demoiselle Nimble</phrase>
							</textobject>
							<caption>
								<para>Sub-item Demoiselle Nimble</para>
							</caption>		        	    
        				</mediaobject>            		
		 			</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>Acione o Demoiselle-Nimble através dos atalhos acima, após alguns segundos a tela seguinte deverá ser apresentada:</para>
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/Demoiselle_Nimble_CreateApp.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/Demoiselle_Nimble_CreateApp.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Criando uma aplicação Maven com Demoiselle Nimble</phrase>
				</textobject>
				<caption>
					<para>Criando uma aplicação Maven com Demoiselle Nimble</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Selecione a opção: Demoiselle V2 Create JSF Application, e clique no botão <emphasis> Next > </emphasis> </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/Demoiselle_v2_Create_JSF_Application.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/Demoiselle_v2_Create_JSF_Application.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Criando uma aplicação JSF com Demoiselle Nimble</phrase>
				</textobject>
				<caption>
					<para>Criando uma aplicação JSF com Demoiselle Nimble</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Nesta tela, na opção: 1. Output Folder, no Eclipse estará selecionado o Workspace atual, caso contrário utilize o botão <emphasis> Browse... </emphasis> 
		 para encontrar o diretório correto</para>
		 <para>Informe as seguintes informações nos campos seguintes:</para>
		 <para>2. Package Name: br.org.frameworkdemoiselle</para>
		 <para>3. Project Name: testeV2</para>
		 <para>4. Version: 1.0.0</para>
		 <para>Em seguinda clique no botão <emphasis>Finish</emphasis> e aguarde que o processo seja concluído. </para>
		 <para>O projeto deverá aparecer na área de trabalho do Eclipse, mas como foi criado através do Nimble não está configurado como um 
		 projeto Maven. Para que o Eclipse reconheça como projeto Maven é preciso configurá-lo.</para>
		 <para>Para isso, selecione o projeto e clique com o botão direito do mouse para ativar o menu e selecionar as opções: Configure -> Convert to Manven Project</para>		 
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/ConfigureMavenProject.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/ConfigureMavenProject.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Configurando projeto para Maven</phrase>
				</textobject>
				<caption>
					<para>Configurando projeto para Maven</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 
		<para> Com isso já podemos partir para <xref linkend="ESample_Prepar_Proj"/>, mas podem haver caos (versões mais antigas do Eclipse) em que devemos importar o 
		projeto Maven que foi criado para dentro do wokspace de trabalho. Se este for o caso veja os passos abaixo </para>
		
		<para>Para importar o projeto, devemos usar a opção File -> Import  e em seguida selecionar: Maven -> Existing Maven Project</para>
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/ImportMavenProject.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/ImportMavenProject.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Importando o projeto criado pelo Nimble para o Eclipse</phrase>
				</textobject>
				<caption>
					<para>Importando o projeto criado pelo Nimble para o Eclipse</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/ImportMavenProject2.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/ImportMavenProject2.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Selecionando o diretório do projeto</phrase>
				</textobject>
				<caption>
					<para>Selecionando o diretório do projeto</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Na tela acima, selecione o diretório onde o projeto foi criado e depois clique no botão finish e aguarde o Eclipse 
		 fazer a importação do projeto. </para>
		 
		 <para> Abaixo o video de demonstração de criação de projeto com apoio do Demoiselle Nimble.</para>
		<para>
		<!-- 
		<mediaobject >
			<videoobject >
				<videodata valign="middle" align="center" scalefit="100%" fileref="videos/nimble_create_proj_leg.avi" scale="100%" width="100%" contentwidth="100%"/>
			</videoobject>		
			<textobject>
				<para>Demonstração de criação de projeto com apoio do Demoiselle Nimble</para>
			</textobject>
		</mediaobject>  -->		
		<ulink url="http://youtu.be/witf3ZIhLlM"></ulink>		
	</para>
		 
		 
		</section>
		<section id="ESample_Prepar_Proj">
		<title>Configurações e Classes de Domínio</title>
		<para>Com um projeto Demoiselle JSF-JPA criado, vamos verificar algumas configurações e fazer a criação das classes de domínio necessárias para o uso do Demoiselle-Nimble </para>
		<para>Abra o projeto e verifique o arquivo /src/main/resources/persistence.xml e remova os comentários para escolher a estratégia de transação. Conforme exemplo mostrado abaixo:</para>
		<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">

	<!-- If you are using JBoss AS7 with non JTA transaction then use this persistence-unit -->
	<!--
	-->
	<persistence-unit name="testeV2-ds" transaction-type="RESOURCE_LOCAL">
		<non-jta-data-source>java:jboss/datasources/ExampleDS</non-jta-data-source>
		<properties>
			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.format_sql" value="false" />
			<property name="hibernate.hbm2ddl.auto" value="create-drop" />
		</properties>
	</persistence-unit>
</persistence>
		]]></programlisting>
		<para>No arquivo /src/main/resources/messages.properties, encontre e mude a propriedade main.app.title para o titulo da sua aplicação, como no exemplo abaixo: </para>
		 <para>main.app.title=TesteV2</para>		
		
		<para>Em seguida, vamos localizar o pacote <emphasis>Domain</emphasis> conforme a figura abaixo: </para>
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/PacoteDomain.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/PacoteDomain.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Localizando o pacote das classes de domínio</phrase>
				</textobject>
				<caption>
					<para>Localizando o pacote das classes de domínio</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Crie neste pacote uma classe chamada <emphasis>Pessoa</emphasis>, que será uma classe abstrata apenas
		 para que possamos testar com o conceito de herança, conforme o código abaixo</para>
		 
	 <para>
		       <programlisting role="java"><![CDATA[import java.util.Date;
import javax.persistence.*;

@MappedSuperclass
public abstract class Pessoa {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private Long id;
	
	@Column
    private Long cpf;
	
    @Column(nullable=false,  length=255)
    private String nome;
    

    @Column(nullable=false)
    @Temporal(value=TemporalType.DATE)
    private Date dataNascimento;
    
    @Enumerated(EnumType.STRING)
	@Column (length=10)
	private Genero genero;
	
	public Pessoa(){
    	super();
    }    
    
	public Pessoa(Long cpf, String nome, Date dataNascimento, Genero genero) {		
		this.cpf = cpf;
		this.nome = nome;
		this.dataNascimento = dataNascimento;
		this.genero = genero;
	}
	    	
	public void setId(Long id) {
		this.id = id;
	}
	public Long getId() {
		return id;
	}
	public void setNome(String nome) {
		this.nome = nome;
	}
	public String getNome() {
		return nome;
	}
	public void setCpf(Long cpf) {
		this.cpf = cpf;
	}
	public Long getCpf() {
		return cpf;
	}
	public void setDataNascimento(Date dataNascimento) {
		this.dataNascimento = dataNascimento;
	}
	public Date getDataNascimento() {
		return dataNascimento;
	}
	public Genero getGenero() {
		return genero;
	}
	public void setGenero(Genero genero) {
		this.genero = genero;
	}
}]]></programlisting>		 
 </para>
 <para>Depois a classe <emphasis>Estudante</emphasis>, que extenderá Pessoa de acordo com o código abaixo :</para>
 <para>
        	      <programlisting role="java"><![CDATA[import java.io.Serializable;
import java.util.Date;
import java.util.List;
import javax.persistence.*;

@Entity
@Table(name="TB_Estudante")
public class Estudante extends Pessoa implements Serializable {

	private static final long serialVersionUID = 1L;
	
	@Column(nullable=false)
    @Temporal(value=TemporalType.DATE)
    private Date dataMatricula;
	
	@Column
	private Integer numeroMatricula;
	
	@ManyToOne 
	@JoinColumn (name= "turma_fk")
	private Turma turma;
	
	@OneToOne (cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private BolsaEstudo bolsaEstudo;
		
	
	@ManyToMany (cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinTable(name = "tb_estudante_endereco", joinColumns = @JoinColumn(name = "id_estudante"), 
	           inverseJoinColumns = @JoinColumn(name = "cod_endereco"))
	private List<Endereco> enderecos;

	public Estudante(){
		super();
	}

	public Estudante(Date dataMatricula, Integer numeroMatricula, Long cpf, String nome,
				Date dataNascimento, Genero genero) {
		super(cpf, nome, dataNascimento, genero);
		this.dataMatricula = dataMatricula;
		this.numeroMatricula = numeroMatricula;
	}
		
	
	public Estudante(Date dataMatricula, Integer numeroMatricula, Turma turma,
					 BolsaEstudo bolsaEstudo, List<Endereco> enderecos, Long cpf, 
					 String nome, Date dataNascimento, Genero genero) {
		super(cpf, nome, dataNascimento, genero);
		this.dataMatricula = dataMatricula;
		this.setTurma(turma);
		this.numeroMatricula = numeroMatricula;
		this.bolsaEstudo = bolsaEstudo;
		this.setEnderecos(enderecos);

	}

	public Date getDataMatricula() {
		return dataMatricula;
	}

	public void setDataMatricula(Date dataMatricula) {
		this.dataMatricula = dataMatricula;
	}

	public Integer getNumeroMatricula() {
		return numeroMatricula;
	}

	public void setNumeroMatricula(Integer numeroMatricula) {
		this.numeroMatricula = numeroMatricula;
	}
	
	public Turma getTurma() {
		return turma;
	}

	public void setTurma(Turma turma) {
		this.turma = turma;
	}

	public BolsaEstudo getBolsaEstudo() {
		return bolsaEstudo;
	}

	public void setBolsaEstudo(BolsaEstudo bolsaEstudo) {
		this.bolsaEstudo = bolsaEstudo;
	}

	public List<Endereco> getEnderecos() {
		return enderecos;
	}

	public void setEnderecos(List<Endereco> enderecos) {
		this.enderecos = enderecos;
	}

}]]></programlisting>
</para>

<para>Teremos a classe de enumeração Genero usada por "Pessoa":</para>
<para>
      <programlisting role="java"><![CDATA[public enum Genero {
	
	MALE, FEMALE;
}]]></programlisting>
</para>

<para>E as demais classes necessárias para o exemplo:</para>
<para> - BolsaEstudo.java:</para>
<para>
        	      <programlisting role="java"><![CDATA[import java.io.Serializable;
import java.util.Date;
import javax.persistence.*;

@Entity
@Table(name = "TB_Bolsa")
public class BolsaEstudo implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "id_bolsa")
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private Integer numero;

	@Column
	private Long porcentagem;

	@Column(nullable = false)
	@Temporal(value = TemporalType.DATE)
	private Date dataInicio;

	@Column
	@Temporal(value = TemporalType.DATE)
	private Date dataFim;

	public BolsaEstudo() {
		super();
	}

	public BolsaEstudo(Long porcentagem, Date dataInicio,
			Date dataFim) {
		super();
		this.porcentagem = porcentagem;
		this.dataInicio = dataInicio;
		this.dataFim = dataFim;
	}

	public Integer getNumero() {
		return numero;
	}

	public void setNumero(Integer numero) {
		this.numero = numero;
	}

	public Long getPorcentagem() {
		return porcentagem;
	}

	public void setPorcentagem(Long porcentagem) {
		this.porcentagem = porcentagem;
	}

	public Date getDataInicio() {
		return dataInicio;
	}

	public void setDataInicio(Date dataInicio) {
		this.dataInicio = dataInicio;
	}

	public Date getDataFim() {
		return dataFim;
	}

	public void setDataFim(Date dataFim) {
		this.dataFim = dataFim;
	}

}]]></programlisting>
</para>

<para> - Endereco.java:</para>
<para>
    <programlisting role="java"><![CDATA[import java.io.Serializable;
import java.util.List;
import javax.persistence.*;

@Entity
@Table(name = "TB_Endereco")
public class Endereco implements Serializable {

	private static final long serialVersionUID = 1L;
	
	@Id
	@Column(name = "cod_endereco")
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private Long codigo;
	
	@Column
	private String logradouro;
	
	@Column
	private String cidade;
	
	@Column
	private String estado;
	
	@Column
	private String cep;
	
	@ManyToMany(mappedBy="enderecos")
	private List<Estudante> estudantes;
	
	public Endereco (){
		super();
	}
	public Endereco(String logradouro, String cidade,
			String estado, String cep) {
		super();
		this.logradouro = logradouro;
		this.cidade = cidade;
		this.estado = estado;
		this.cep = cep;
	}
	public Endereco(String logradouro, String cidade,
			String estado, String cep, List<Estudante> estudantes) {
		super();
		this.logradouro = logradouro;
		this.cidade = cidade;
		this.estado = estado;
		this.cep = cep;
		this.estudantes = estudantes;
	}
	public Long getCodigo() {
		return codigo;
	}
	public void setCodigo(Long codigo) {
		this.codigo = codigo;
	}
	public String getLogradouro() {
		return logradouro;
	}
	public void setLogradouro(String logradouro) {
		this.logradouro = logradouro;
	}
	public String getCidade() {
		return cidade;
	}
	public void setCidade(String cidade) {
		this.cidade = cidade;
	}
	public String getEstado() {
		return estado;
	}
	public void setEstado(String estado) {
		this.estado = estado;
	}
	public String getCep() {
		return cep;
	}
	public void setCep(String cep) {
		this.cep = cep;
	}	public List<Estudante> getEstudantes() {
		return estudantes;
	}
	public void setEstudantes(List<Estudante> estudantes) {
		this.estudantes = estudantes;
	}
}]]></programlisting>
</para>

<para> - Turma.java:</para>
<para>
    <programlisting role="java"><![CDATA[import java.io.Serializable;
import java.util.*;
import javax.persistence.*;
import javax.validation.constraints.NotNull;

@Entity
@Table(name = "TB_Turma")
public class Turma implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "id_turma")
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private Long id;

	@Column(length = 255)
	@NotNull
	private String nomeTurma;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinColumn(name = "turma_fk")
	private List<Estudante> estudantes = new ArrayList<Estudante>();

	public Turma() {
		super();
	}

	public Turma(String nomeTurma) {
		this.nomeTurma = nomeTurma;
	}
	
	public Turma(String nomeTurma, List<Estudante> estudantes) {
		this.nomeTurma = nomeTurma;
		this.estudantes = estudantes;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getNomeTurma() {
		return nomeTurma;
	}
	public void setNomeTurma(String nomeTurma) {
		this.nomeTurma = nomeTurma;
	}
	public List<Estudante> getEstudantes() {
		return estudantes;
	}
	public void setEstudantes(List<Estudante> estudantes) {
		this.estudantes = estudantes;
	}
}]]></programlisting>
</para>
		</section>
		 <para> Isso é tudo que precisamos criar manualmente para começar o uso do Demoiselle-Nimble. 
		 Caso tenha uma base de dados pronta, é possível utilizar um utilitário como o  <ulink url="http://hibernate.org/tools/">Hibernate Tools</ulink>
		 para fazer a geração das classes mapeadas com JPA.
		 </para>
		 <para>A única exigência para geração de código com o Demoiselle-Nimble, é que as classes estejam com as anotações de JPA, conforme o exemplo acima.
		 E a ferramenta atuará sobre as classes anotadas com @Entity.</para>
		 
		<para> Abaixo o video de demonstração da preparação do ambiente.</para>
		<para>
		<!-- 
		<mediaobject >
			<videoobject >
				<videodata valign="middle" align="center" scalefit="100%" fileref="videos/nimble_sample_prepar_leg.avi" scale="100%" width="100%" contentwidth="100%"/>
			</videoobject>		
			<textobject>
				<para>demonstração da preparação do ambiente</para>
			</textobject>
		</mediaobject>  -->		
		<ulink url="http://youtu.be/NdCP_7DIBjU"></ulink>		
	</para>
		 
</section>
	<beginpage/>
	<section id="nimble_eclipse_tradicional">
	<title> Gerando uma aplicação Web Tradicional </title>
	<para>Neste primeiro exemplo, vamos utilizar a ferramenta para gerar os artefatos de uma aplicação WEB tradicional.</para>
		<para>Selecione o projeto e veja onde estão os acionadores do Plugin Demoiselle Nimble</para>
		<para>
			<itemizedlist>
				<listitem>
					<para> Um ícone na barra de ferramentas:</para>
					<para>
        				<mediaobject>
		       				<imageobject role="fo">
		               			<imagedata fileref="images/IconeNimble.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        			</imageobject>
		        			<imageobject role="html">
		  	            			<imagedata fileref="images/IconeNimble.png"  format="PNG" align="center"/>
		        			</imageobject>
	       	    			<textobject>
								<phrase>Icone do Demoiselle Nimble na barra de ferramentas</phrase>
							</textobject>
							<caption>
								<para>Icone do Demoiselle Nimble na barra de ferramentas</para>
							</caption>		        	    
        				</mediaobject>            		
		 			</para>
				</listitem>
				<listitem>
					<para>Sub-item no Menu Ferramentas</para>
					<para>
        				<mediaobject>
		       				<imageobject role="fo">
		               			<imagedata fileref="images/MenuNimbleEclipse.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        			</imageobject>
		        			<imageobject role="html">
		  	            			<imagedata fileref="images/MenuNimbleEclipse.png"  format="PNG" align="center"/>
		        			</imageobject>
	       	    			<textobject>
								<phrase>Sub-item Demoiselle Nimble</phrase>
							</textobject>
							<caption>
								<para>Sub-item Demoiselle Nimble</para>
							</caption>		        	    
        				</mediaobject>            		
		 			</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>Com o projeto selecionado, use uma das opções acima para acionar a interface do Demoiselle Nimble, onde selecionaremos o Template
		para geração de um CRUD (Create, Read, Update e Delete) que são as operações básicas de criar, ler, atualizar e apagar</para>
		<para>Selecione o Template adequado ao arquétipo que foi criado, neste exemplo optamos pelo Primefaces 5, que é compatível com a versão 2.5.0 (ou superior) do Demoiselle
		 conforme a figura abaixo:</para>
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/SelectCRUDTemplateJSF.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/SelectCRUDTemplateJSF.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Escolhendo o template de CRUD</phrase>
				</textobject>
				<caption>
					<para>Escolhendo o template de CRUD</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>	
		 <para>Na tela seguinte, deverão ser informados os parâmetros para geração dos artefatos</para>
		 <para>1. Output Folder*: Use o botão <emphasis>Browse...</emphasis> para selecionar o projeto dentro do diretório de Workspace do Eclipse</para>
		 <para>2. Entity Name*:  Use o botão <emphasis>Click to select an entity class file...</emphasis> e procure no diretório (/src/main/java/br/org/frameworkdemoiselle/domain/)
		 a classe Estudante.java</para>
		 <para>3. Package Name*: Será preenchido automáticamente com <emphasis>br.org.frameworkdemoiselle</emphasis> </para>
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/GenerateJSFPrimefaces3CRUD.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/GenerateJSFPrimefaces3CRUD.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Informando os parâmetros para criação dos artefatos</phrase>
				</textobject>
				<caption>
					<para>Informando os parâmetros para criação dos artefatos</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Aguarde o processamento até que a tela de confirmação apareceça</para>
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/TemplateProcessOK.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/TemplateProcessOK.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Processamento do Template OK</phrase>
				</textobject>
				<caption>
					<para>Processamento do Template OK</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Confira os artefatos que foram gerados nos pacotes de negócio(business), persistência (persistence)
		 e de visão (view) e no pacote de conversores (converters) que é específico para o JSF</para>
		 
		<para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/ArtifactsCreatedMain.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/ArtifactsCreatedMain.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Listagem dos artefatos criados em /src/main/java/</phrase>
				</textobject>
				<caption>
					<para>Listagem dos artefatos criados em /src/main/java/</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Na classe EstudanteEditMB é exibido um erro pois a classe Estudante possui relação com outras classes e ainda não criamos todos os artefatos para todas as classes de domínio,
		 quando terminarmos não haverá mais esse erro. </para>
		 <para>Veja também nos arquivos: persistence.xml e messages.properties, que novas informações foram incluídas.</para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/PersistenceXml.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/PersistenceXml.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Arquivo persistence.xml</phrase>
				</textobject>
				<caption>
					<para>Arquivo persistence.xml</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/MessagesProperties.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/MessagesProperties.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Arquivo messages.properties</phrase>
				</textobject>
				<caption>
					<para>Arquivo messages.properties</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Na pasta /src/test/java/ será gerada a classe de teste de unidade para a classe de Negócio (BC) com testes para os métodos de inclusão (Insert), exclusão (Delete) e  atualização (Update) de forma bastante simplificada. </para>
		 <para>O arquivo persistence.xml também será atualizado.</para>		 
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/ArtifactsCreatedTest.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/ArtifactsCreatedTest.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Listagem dos artefatos criados em /src/test/</phrase>
				</textobject>
				<caption>
					<para>Listagem dos artefatos criados em /src/test/</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Na pasta /src/main/webapp (Deployed Resources) também deverão ser geradas as páginas XHTML de edição e listagem e menu.xhml</para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/DeployedResources.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/DeployedResources.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Listagem dos artefatos criados em /src/main/webapp/</phrase>
				</textobject>
				<caption>
					<para>Listagem dos artefatos criados em /src/main/webapp/</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Repita os passos de geração para cada uma das outras classes de domínio que foram criadas na preparação do ambiente:
		  </para>
		  <itemizedlist mark='classes_dominio'>
		  	 <listitem><para>BolsaEstudo.java</para></listitem>
		  	 <listitem><para>Endereco.java</para></listitem>
		  	 <listitem><para>Turma.java</para></listitem>
		  </itemizedlist>
		  
		  <para> Abaixo o video de demonstração da criação dos artefatos CRUD.</para>
		<para>
		<!-- 
		<mediaobject>
			<videoobject>
				<videodata valign="middle" align="center" scalefit="100%" fileref="videos/nimble_crud_leg.avi" scale="100%" width="100%" contentwidth="100%"/>
			</videoobject>		
			<textobject>
				<para>Demonstração da criação dos artefatos CRUD</para>
			</textobject>
		</mediaobject>  -->		
		<ulink url="http://youtu.be/7YA5l7UsCzM"></ulink>		
	</para>
		  
		  
		 <para>A partir da versão 1.2.0 do Demoiselle Nimble, é possível montar templates que identificam as anotações de relacionamentos do JPA,
		 e assim podem ser definidos os componentes de tela os métodos de visão e negócio para tratar cada um deles. 
		 O template para JSF padrão trata os relacionamentos da segunte forma:</para>
		 <itemizedlist mark='relacionamentos'>
		  	 <listitem><para>OneToOne: ComboBox</para></listitem>
		  	 <listitem><para>OneToMany: ComboBox</para></listitem>
		  	 <listitem><para>ManyToOne: DataTable </para></listitem>
		  	 <listitem><para>ManyToMany: PickList</para></listitem>
		  </itemizedlist>
		 <para>Para testar as funcionalidade criadas, adicionaremos o projeto no servidor JBoss.</para>
		 <para>Localize a aba  <emphasis>"Servers"</emphasis> e clique com o botão direito do mouse sobre o item: jboss-7.1 para acionar
		 o menu. Em seguida selecione a opção <emphasis>"Add and Remove..."</emphasis></para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/AddDeploy.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/AddDeploy.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Deploy da aplicação no servidor JBoss.</phrase>
				</textobject>
				<caption>
					<para>Deploy da aplicação no servidor JBoss.</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Na tela seguinte selecione o projeto clique primeiro no botão <emphasis>Add</emphasis> e depois <emphasis>Finish</emphasis> </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/AddDeploy2.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/AddDeploy2.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Deploy da aplicação no servidor JBoss.</phrase>
				</textobject>
				<caption>
					<para>Deploy da aplicação no servidor JBoss.</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>Com isso podemos iniciar o servidor de aplicação.</para>
		 <para>No exemplo a aplicação estará em http://localhost:8080/testeV2</para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/RunningExample.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/RunningExample.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Resultado na aplicação em funcionamento.</phrase>
				</textobject>
				<caption>
					<para>Resultado na aplicação em funcionamento</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/RunningExample2.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/RunningExample2.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Resultado na aplicação em funcionamento.</phrase>
				</textobject>
				<caption>
					<para>Resultado na aplicação em funcionamento</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/RunningExample3.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/RunningExample3.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Resultado na aplicação em funcionamento.</phrase>
				</textobject>
				<caption>
					<para>Resultado na aplicação em funcionamento</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 <para>
        	<mediaobject>
		       	<imageobject role="fo">
		               <imagedata fileref="images/RunningExample4.png"  format="PNG" align="center" scalefit="1" width="75%"/> 
		        </imageobject>
		        <imageobject role="html">
		  	            <imagedata fileref="images/RunningExample4.png"  format="PNG" align="center"/>
		        </imageobject>
	       	    <textobject>
					<phrase>Resultado na aplicação em funcionamento.</phrase>
				</textobject>
				<caption>
					<para>Resultado na aplicação em funcionamento</para>
				</caption>		        	    
        	</mediaobject>            		
		 </para>
		 
		 <para> Abaixo o video de demonstração da execução da aplicação criada pelo Demoiselle Nimble.</para>
		<para>
		<!--  <mediaobject>
			<videoobject>
				<videodata  valign="middle" align="center" scalefit="100%" fileref="videos/nimble_crud_demonstra_leg.avi" scale="100%" width="100%" contentwidth="100%"/>
			</videoobject>		
			<textobject>
				<para>Demonstração da da criação dos artefatos CRUD</para>
			</textobject>
		</mediaobject>
		 -->		
		<ulink url="http://youtu.be/Dou9GbNtsNk"></ulink>		
	</para>
		 		 
	</section>	
</chapter>